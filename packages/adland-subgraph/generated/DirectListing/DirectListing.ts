// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class BuyerApprovedForListing extends ethereum.Event {
  get params(): BuyerApprovedForListing__Params {
    return new BuyerApprovedForListing__Params(this);
  }
}

export class BuyerApprovedForListing__Params {
  _event: BuyerApprovedForListing;

  constructor(event: BuyerApprovedForListing) {
    this._event = event;
  }

  get listingId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class CancelledListing extends ethereum.Event {
  get params(): CancelledListing__Params {
    return new CancelledListing__Params(this);
  }
}

export class CancelledListing__Params {
  _event: CancelledListing;

  constructor(event: CancelledListing) {
    this._event = event;
  }

  get listingCreator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get listingId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CurrencyApprovedForListing extends ethereum.Event {
  get params(): CurrencyApprovedForListing__Params {
    return new CurrencyApprovedForListing__Params(this);
  }
}

export class CurrencyApprovedForListing__Params {
  _event: CurrencyApprovedForListing;

  constructor(event: CurrencyApprovedForListing) {
    this._event = event;
  }

  get listingId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get currency(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get pricePerToken(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NewListing extends ethereum.Event {
  get params(): NewListing__Params {
    return new NewListing__Params(this);
  }
}

export class NewListing__Params {
  _event: NewListing;

  constructor(event: NewListing) {
    this._event = event;
  }

  get listingCreator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get listingId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get assetContract(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get listing(): NewListingListingStruct {
    return changetype<NewListingListingStruct>(
      this._event.parameters[3].value.toTuple(),
    );
  }
}

export class NewListingListingStruct extends ethereum.Tuple {
  get listingId(): BigInt {
    return this[0].toBigInt();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get quantity(): BigInt {
    return this[2].toBigInt();
  }

  get pricePerToken(): BigInt {
    return this[3].toBigInt();
  }

  get startTimestamp(): BigInt {
    return this[4].toBigInt();
  }

  get endTimestamp(): BigInt {
    return this[5].toBigInt();
  }

  get listingCreator(): Address {
    return this[6].toAddress();
  }

  get listingOwner(): Address {
    return this[7].toAddress();
  }

  get assetContract(): Address {
    return this[8].toAddress();
  }

  get currency(): Address {
    return this[9].toAddress();
  }

  get taxRate(): BigInt {
    return this[10].toBigInt();
  }

  get taxBeneficiary(): Address {
    return this[11].toAddress();
  }

  get tokenType(): i32 {
    return this[12].toI32();
  }

  get status(): i32 {
    return this[13].toI32();
  }

  get reserved(): boolean {
    return this[14].toBoolean();
  }
}

export class NewSale extends ethereum.Event {
  get params(): NewSale__Params {
    return new NewSale__Params(this);
  }
}

export class NewSale__Params {
  _event: NewSale;

  constructor(event: NewSale) {
    this._event = event;
  }

  get listingCreator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get listingId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get assetContract(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get quantityBought(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get totalPricePaid(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class UpdatedListing extends ethereum.Event {
  get params(): UpdatedListing__Params {
    return new UpdatedListing__Params(this);
  }
}

export class UpdatedListing__Params {
  _event: UpdatedListing;

  constructor(event: UpdatedListing) {
    this._event = event;
  }

  get listingCreator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get listingId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get assetContract(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get listing(): UpdatedListingListingStruct {
    return changetype<UpdatedListingListingStruct>(
      this._event.parameters[3].value.toTuple(),
    );
  }
}

export class UpdatedListingListingStruct extends ethereum.Tuple {
  get listingId(): BigInt {
    return this[0].toBigInt();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get quantity(): BigInt {
    return this[2].toBigInt();
  }

  get pricePerToken(): BigInt {
    return this[3].toBigInt();
  }

  get startTimestamp(): BigInt {
    return this[4].toBigInt();
  }

  get endTimestamp(): BigInt {
    return this[5].toBigInt();
  }

  get listingCreator(): Address {
    return this[6].toAddress();
  }

  get listingOwner(): Address {
    return this[7].toAddress();
  }

  get assetContract(): Address {
    return this[8].toAddress();
  }

  get currency(): Address {
    return this[9].toAddress();
  }

  get taxRate(): BigInt {
    return this[10].toBigInt();
  }

  get taxBeneficiary(): Address {
    return this[11].toAddress();
  }

  get tokenType(): i32 {
    return this[12].toI32();
  }

  get status(): i32 {
    return this[13].toI32();
  }

  get reserved(): boolean {
    return this[14].toBoolean();
  }
}

export class DirectListing__createListingInput_paramsStruct extends ethereum.Tuple {
  get assetContract(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get quantity(): BigInt {
    return this[2].toBigInt();
  }

  get currency(): Address {
    return this[3].toAddress();
  }

  get taxRate(): BigInt {
    return this[4].toBigInt();
  }

  get taxBeneficiary(): Address {
    return this[5].toAddress();
  }

  get pricePerToken(): BigInt {
    return this[6].toBigInt();
  }

  get startTimestamp(): BigInt {
    return this[7].toBigInt();
  }

  get endTimestamp(): BigInt {
    return this[8].toBigInt();
  }

  get reserved(): boolean {
    return this[9].toBoolean();
  }
}

export class DirectListing__getAllListingsResult_allListingsStruct extends ethereum.Tuple {
  get listingId(): BigInt {
    return this[0].toBigInt();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get quantity(): BigInt {
    return this[2].toBigInt();
  }

  get pricePerToken(): BigInt {
    return this[3].toBigInt();
  }

  get startTimestamp(): BigInt {
    return this[4].toBigInt();
  }

  get endTimestamp(): BigInt {
    return this[5].toBigInt();
  }

  get listingCreator(): Address {
    return this[6].toAddress();
  }

  get listingOwner(): Address {
    return this[7].toAddress();
  }

  get assetContract(): Address {
    return this[8].toAddress();
  }

  get currency(): Address {
    return this[9].toAddress();
  }

  get taxRate(): BigInt {
    return this[10].toBigInt();
  }

  get taxBeneficiary(): Address {
    return this[11].toAddress();
  }

  get tokenType(): i32 {
    return this[12].toI32();
  }

  get status(): i32 {
    return this[13].toI32();
  }

  get reserved(): boolean {
    return this[14].toBoolean();
  }
}

export class DirectListing__getAllValidListingsResult_validListingsStruct extends ethereum.Tuple {
  get listingId(): BigInt {
    return this[0].toBigInt();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get quantity(): BigInt {
    return this[2].toBigInt();
  }

  get pricePerToken(): BigInt {
    return this[3].toBigInt();
  }

  get startTimestamp(): BigInt {
    return this[4].toBigInt();
  }

  get endTimestamp(): BigInt {
    return this[5].toBigInt();
  }

  get listingCreator(): Address {
    return this[6].toAddress();
  }

  get listingOwner(): Address {
    return this[7].toAddress();
  }

  get assetContract(): Address {
    return this[8].toAddress();
  }

  get currency(): Address {
    return this[9].toAddress();
  }

  get taxRate(): BigInt {
    return this[10].toBigInt();
  }

  get taxBeneficiary(): Address {
    return this[11].toAddress();
  }

  get tokenType(): i32 {
    return this[12].toI32();
  }

  get status(): i32 {
    return this[13].toI32();
  }

  get reserved(): boolean {
    return this[14].toBoolean();
  }
}

export class DirectListing__getListingResultListingStruct extends ethereum.Tuple {
  get listingId(): BigInt {
    return this[0].toBigInt();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get quantity(): BigInt {
    return this[2].toBigInt();
  }

  get pricePerToken(): BigInt {
    return this[3].toBigInt();
  }

  get startTimestamp(): BigInt {
    return this[4].toBigInt();
  }

  get endTimestamp(): BigInt {
    return this[5].toBigInt();
  }

  get listingCreator(): Address {
    return this[6].toAddress();
  }

  get listingOwner(): Address {
    return this[7].toAddress();
  }

  get assetContract(): Address {
    return this[8].toAddress();
  }

  get currency(): Address {
    return this[9].toAddress();
  }

  get taxRate(): BigInt {
    return this[10].toBigInt();
  }

  get taxBeneficiary(): Address {
    return this[11].toAddress();
  }

  get tokenType(): i32 {
    return this[12].toI32();
  }

  get status(): i32 {
    return this[13].toI32();
  }

  get reserved(): boolean {
    return this[14].toBoolean();
  }
}

export class DirectListing extends ethereum.SmartContract {
  static bind(address: Address): DirectListing {
    return new DirectListing("DirectListing", address);
  }

  _msgData(): Bytes {
    let result = super.call("_msgData", "_msgData():(bytes)", []);

    return result[0].toBytes();
  }

  try__msgData(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("_msgData", "_msgData():(bytes)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  _msgSender(): Address {
    let result = super.call("_msgSender", "_msgSender():(address)", []);

    return result[0].toAddress();
  }

  try__msgSender(): ethereum.CallResult<Address> {
    let result = super.tryCall("_msgSender", "_msgSender():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createListing(
    _params: DirectListing__createListingInput_paramsStruct,
  ): BigInt {
    let result = super.call(
      "createListing",
      "createListing((address,uint256,uint256,address,uint256,address,uint256,uint128,uint128,bool)):(uint256)",
      [ethereum.Value.fromTuple(_params)],
    );

    return result[0].toBigInt();
  }

  try_createListing(
    _params: DirectListing__createListingInput_paramsStruct,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createListing",
      "createListing((address,uint256,uint256,address,uint256,address,uint256,uint128,uint128,bool)):(uint256)",
      [ethereum.Value.fromTuple(_params)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currencyPriceForListing(_listingId: BigInt, _currency: Address): BigInt {
    let result = super.call(
      "currencyPriceForListing",
      "currencyPriceForListing(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_listingId),
        ethereum.Value.fromAddress(_currency),
      ],
    );

    return result[0].toBigInt();
  }

  try_currencyPriceForListing(
    _listingId: BigInt,
    _currency: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currencyPriceForListing",
      "currencyPriceForListing(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_listingId),
        ethereum.Value.fromAddress(_currency),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAllListings(
    _startId: BigInt,
    _endId: BigInt,
  ): Array<DirectListing__getAllListingsResult_allListingsStruct> {
    let result = super.call(
      "getAllListings",
      "getAllListings(uint256,uint256):((uint256,uint256,uint256,uint256,uint128,uint128,address,address,address,address,uint256,address,uint8,uint8,bool)[])",
      [
        ethereum.Value.fromUnsignedBigInt(_startId),
        ethereum.Value.fromUnsignedBigInt(_endId),
      ],
    );

    return result[0].toTupleArray<DirectListing__getAllListingsResult_allListingsStruct>();
  }

  try_getAllListings(
    _startId: BigInt,
    _endId: BigInt,
  ): ethereum.CallResult<
    Array<DirectListing__getAllListingsResult_allListingsStruct>
  > {
    let result = super.tryCall(
      "getAllListings",
      "getAllListings(uint256,uint256):((uint256,uint256,uint256,uint256,uint128,uint128,address,address,address,address,uint256,address,uint8,uint8,bool)[])",
      [
        ethereum.Value.fromUnsignedBigInt(_startId),
        ethereum.Value.fromUnsignedBigInt(_endId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<DirectListing__getAllListingsResult_allListingsStruct>(),
    );
  }

  getAllValidListings(
    _startId: BigInt,
    _endId: BigInt,
  ): Array<DirectListing__getAllValidListingsResult_validListingsStruct> {
    let result = super.call(
      "getAllValidListings",
      "getAllValidListings(uint256,uint256):((uint256,uint256,uint256,uint256,uint128,uint128,address,address,address,address,uint256,address,uint8,uint8,bool)[])",
      [
        ethereum.Value.fromUnsignedBigInt(_startId),
        ethereum.Value.fromUnsignedBigInt(_endId),
      ],
    );

    return result[0].toTupleArray<DirectListing__getAllValidListingsResult_validListingsStruct>();
  }

  try_getAllValidListings(
    _startId: BigInt,
    _endId: BigInt,
  ): ethereum.CallResult<
    Array<DirectListing__getAllValidListingsResult_validListingsStruct>
  > {
    let result = super.tryCall(
      "getAllValidListings",
      "getAllValidListings(uint256,uint256):((uint256,uint256,uint256,uint256,uint128,uint128,address,address,address,address,uint256,address,uint8,uint8,bool)[])",
      [
        ethereum.Value.fromUnsignedBigInt(_startId),
        ethereum.Value.fromUnsignedBigInt(_endId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<DirectListing__getAllValidListingsResult_validListingsStruct>(),
    );
  }

  getListing(_listingId: BigInt): DirectListing__getListingResultListingStruct {
    let result = super.call(
      "getListing",
      "getListing(uint256):((uint256,uint256,uint256,uint256,uint128,uint128,address,address,address,address,uint256,address,uint8,uint8,bool))",
      [ethereum.Value.fromUnsignedBigInt(_listingId)],
    );

    return changetype<DirectListing__getListingResultListingStruct>(
      result[0].toTuple(),
    );
  }

  try_getListing(
    _listingId: BigInt,
  ): ethereum.CallResult<DirectListing__getListingResultListingStruct> {
    let result = super.tryCall(
      "getListing",
      "getListing(uint256):((uint256,uint256,uint256,uint256,uint128,uint128,address,address,address,address,uint256,address,uint8,uint8,bool))",
      [ethereum.Value.fromUnsignedBigInt(_listingId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<DirectListing__getListingResultListingStruct>(
        value[0].toTuple(),
      ),
    );
  }

  isBuyerApprovedForListing(_listingId: BigInt, _buyer: Address): boolean {
    let result = super.call(
      "isBuyerApprovedForListing",
      "isBuyerApprovedForListing(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_listingId),
        ethereum.Value.fromAddress(_buyer),
      ],
    );

    return result[0].toBoolean();
  }

  try_isBuyerApprovedForListing(
    _listingId: BigInt,
    _buyer: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isBuyerApprovedForListing",
      "isBuyerApprovedForListing(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_listingId),
        ethereum.Value.fromAddress(_buyer),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isCurrencyApprovedForListing(
    _listingId: BigInt,
    _currency: Address,
  ): boolean {
    let result = super.call(
      "isCurrencyApprovedForListing",
      "isCurrencyApprovedForListing(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_listingId),
        ethereum.Value.fromAddress(_currency),
      ],
    );

    return result[0].toBoolean();
  }

  try_isCurrencyApprovedForListing(
    _listingId: BigInt,
    _currency: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isCurrencyApprovedForListing",
      "isCurrencyApprovedForListing(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_listingId),
        ethereum.Value.fromAddress(_currency),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalListings(): BigInt {
    let result = super.call("totalListings", "totalListings():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalListings(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalListings",
      "totalListings():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _nativeTokenWrapper(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveBuyerForListingCall extends ethereum.Call {
  get inputs(): ApproveBuyerForListingCall__Inputs {
    return new ApproveBuyerForListingCall__Inputs(this);
  }

  get outputs(): ApproveBuyerForListingCall__Outputs {
    return new ApproveBuyerForListingCall__Outputs(this);
  }
}

export class ApproveBuyerForListingCall__Inputs {
  _call: ApproveBuyerForListingCall;

  constructor(call: ApproveBuyerForListingCall) {
    this._call = call;
  }

  get _listingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _buyer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _toApprove(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class ApproveBuyerForListingCall__Outputs {
  _call: ApproveBuyerForListingCall;

  constructor(call: ApproveBuyerForListingCall) {
    this._call = call;
  }
}

export class ApproveCurrencyForListingCall extends ethereum.Call {
  get inputs(): ApproveCurrencyForListingCall__Inputs {
    return new ApproveCurrencyForListingCall__Inputs(this);
  }

  get outputs(): ApproveCurrencyForListingCall__Outputs {
    return new ApproveCurrencyForListingCall__Outputs(this);
  }
}

export class ApproveCurrencyForListingCall__Inputs {
  _call: ApproveCurrencyForListingCall;

  constructor(call: ApproveCurrencyForListingCall) {
    this._call = call;
  }

  get _listingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _currency(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _pricePerTokenInCurrency(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ApproveCurrencyForListingCall__Outputs {
  _call: ApproveCurrencyForListingCall;

  constructor(call: ApproveCurrencyForListingCall) {
    this._call = call;
  }
}

export class BuyFromListingCall extends ethereum.Call {
  get inputs(): BuyFromListingCall__Inputs {
    return new BuyFromListingCall__Inputs(this);
  }

  get outputs(): BuyFromListingCall__Outputs {
    return new BuyFromListingCall__Outputs(this);
  }
}

export class BuyFromListingCall__Inputs {
  _call: BuyFromListingCall;

  constructor(call: BuyFromListingCall) {
    this._call = call;
  }

  get _listingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _buyFor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _quantity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _currency(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _expectedTotalPrice(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class BuyFromListingCall__Outputs {
  _call: BuyFromListingCall;

  constructor(call: BuyFromListingCall) {
    this._call = call;
  }
}

export class CancelListingCall extends ethereum.Call {
  get inputs(): CancelListingCall__Inputs {
    return new CancelListingCall__Inputs(this);
  }

  get outputs(): CancelListingCall__Outputs {
    return new CancelListingCall__Outputs(this);
  }
}

export class CancelListingCall__Inputs {
  _call: CancelListingCall;

  constructor(call: CancelListingCall) {
    this._call = call;
  }

  get _listingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelListingCall__Outputs {
  _call: CancelListingCall;

  constructor(call: CancelListingCall) {
    this._call = call;
  }
}

export class CreateListingCall extends ethereum.Call {
  get inputs(): CreateListingCall__Inputs {
    return new CreateListingCall__Inputs(this);
  }

  get outputs(): CreateListingCall__Outputs {
    return new CreateListingCall__Outputs(this);
  }
}

export class CreateListingCall__Inputs {
  _call: CreateListingCall;

  constructor(call: CreateListingCall) {
    this._call = call;
  }

  get _params(): CreateListingCall_paramsStruct {
    return changetype<CreateListingCall_paramsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class CreateListingCall__Outputs {
  _call: CreateListingCall;

  constructor(call: CreateListingCall) {
    this._call = call;
  }

  get listingId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateListingCall_paramsStruct extends ethereum.Tuple {
  get assetContract(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get quantity(): BigInt {
    return this[2].toBigInt();
  }

  get currency(): Address {
    return this[3].toAddress();
  }

  get taxRate(): BigInt {
    return this[4].toBigInt();
  }

  get taxBeneficiary(): Address {
    return this[5].toAddress();
  }

  get pricePerToken(): BigInt {
    return this[6].toBigInt();
  }

  get startTimestamp(): BigInt {
    return this[7].toBigInt();
  }

  get endTimestamp(): BigInt {
    return this[8].toBigInt();
  }

  get reserved(): boolean {
    return this[9].toBoolean();
  }
}

export class ForecloseListingCall extends ethereum.Call {
  get inputs(): ForecloseListingCall__Inputs {
    return new ForecloseListingCall__Inputs(this);
  }

  get outputs(): ForecloseListingCall__Outputs {
    return new ForecloseListingCall__Outputs(this);
  }
}

export class ForecloseListingCall__Inputs {
  _call: ForecloseListingCall;

  constructor(call: ForecloseListingCall) {
    this._call = call;
  }

  get _listingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ForecloseListingCall__Outputs {
  _call: ForecloseListingCall;

  constructor(call: ForecloseListingCall) {
    this._call = call;
  }
}

export class UpdateListingCall extends ethereum.Call {
  get inputs(): UpdateListingCall__Inputs {
    return new UpdateListingCall__Inputs(this);
  }

  get outputs(): UpdateListingCall__Outputs {
    return new UpdateListingCall__Outputs(this);
  }
}

export class UpdateListingCall__Inputs {
  _call: UpdateListingCall;

  constructor(call: UpdateListingCall) {
    this._call = call;
  }

  get _listingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _params(): UpdateListingCall_paramsStruct {
    return changetype<UpdateListingCall_paramsStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }
}

export class UpdateListingCall__Outputs {
  _call: UpdateListingCall;

  constructor(call: UpdateListingCall) {
    this._call = call;
  }
}

export class UpdateListingCall_paramsStruct extends ethereum.Tuple {
  get assetContract(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get quantity(): BigInt {
    return this[2].toBigInt();
  }

  get currency(): Address {
    return this[3].toAddress();
  }

  get taxRate(): BigInt {
    return this[4].toBigInt();
  }

  get taxBeneficiary(): Address {
    return this[5].toAddress();
  }

  get pricePerToken(): BigInt {
    return this[6].toBigInt();
  }

  get startTimestamp(): BigInt {
    return this[7].toBigInt();
  }

  get endTimestamp(): BigInt {
    return this[8].toBigInt();
  }

  get reserved(): boolean {
    return this[9].toBoolean();
  }
}
