import { createSchema } from "@ponder/core";

export default createSchema((p) => ({
  User: p.createTable({
    // smartAccount address
    // REQUIRED
    id: p.string(),
    score: p.int(),
    createdAt: p.bigint(),
    // OPTIONAL
    fid: p.bigint().optional(),
    pfp: p.string().optional(),
    username: p.string().optional(),
    displayName: p.string().optional(),
  }),
  AdGroup: p.createTable({
    id: p.string(),
    beneficiary: p.string().references("User.id").optional(),
    user: p.one("beneficiary"),
    adSpaces: p.many("AdSpace.adGroupId"),
    metadataId: p.string().references("AdGroupMetadata.id").optional(),
    metadata: p.one("metadataId"),
    blockTimestamp: p.bigint(),
  }),
  AdGroupMetadata: p.createTable({
    id: p.string(),
    name: p.string().optional(),
    description: p.string().optional(),
    image: p.string().optional(),
    banner: p.string().optional(),
  }),
  AdSpace: p.createTable({
    id: p.string(),
    owner: p.string().references("User.id").optional(),
    user: p.one("owner"),
    listingId: p.string().references("Listing.id"),
    listing: p.one("listingId"),
    adGroupId: p.string().references("AdGroup.id"),
    adGroup: p.one("adGroupId"),
    currentMetadataId: p.string().references("AdSpaceMetadata.id").optional(),
    currentMetadata: p.one("currentMetadataId"),
    flowId: p.string().references("AdFlow.id").optional(),
    flow: p.one("flowId"),
    metadatas: p.many("AdSpaceMetadata.adSpaceId"),
    tokenXId: p.string().references("TokenX.id"),
    tokenX: p.one("tokenXId"),
    transactionHash: p.string(),
  }),
  AdSpaceMetadata: p.createTable({
    id: p.string(),
    adSpaceId: p.string().references("AdSpace.id"),
    adSpace: p.one("adSpaceId"),
    attestationId: p.string().references("Attestation.id").optional(),
    attestation: p.one("attestationId"),
    name: p.string(),
    description: p.string(),
    image: p.string(),
    imageGatewayUri: p.string(),
    animationUrl: p.string().optional(),
    externalUrl: p.string().optional(),
    aspectRatio: p.string(),
    frameRedirectUrl: p.string().optional(),
    noBillboard: p.boolean().optional(),
    //
    blockNumber: p.bigint(),
    transactionHash: p.string(),
  }),
  Attestation: p.createTable({
    id: p.string(), // uid
    revoked: p.boolean().optional(),
    timestamp: p.bigint(),
    transactionHash: p.string(),
  }),
  TokenX: p.createTable({
    id: p.string(),
    underlyingToken: p.string(),
    underlyingName: p.string(),
    underlyingSymbol: p.string(),
    superToken: p.string(),
    superName: p.string(),
    superSymbol: p.string(),
    isNativeToken: p.boolean(),
    blockNumber: p.bigint(),
    blockTimestamp: p.bigint(),
    transactionHash: p.string(),
  }),
  Listing: p.createTable({
    id: p.string(),
    listingId: p.bigint(),
    tokenId: p.bigint(),
    quantity: p.bigint(),
    pricePerToken: p.bigint(),
    startTimestamp: p.bigint(),
    endTimestamp: p.bigint(),
    listingCreator: p.string(),
    listingOwner: p.string(),
    assetContract: p.string(),
    currency: p.string(),
    currencyName: p.string(),
    currencySymbol: p.string(),
    taxRate: p.bigint(),
    taxBeneficiary: p.string(),
    tokenType: p.int(),
    status: p.int(),
    reserved: p.boolean(),
  }),
  AdFlow: p.createTable({
    id: p.string(),
    adSpaceId: p.string().references("AdSpace.id"),
    adSpace: p.one("adSpaceId"),
    flowRate: p.bigint(),
    weeklyFlowRate: p.bigint(),
    blockNumber: p.bigint(),
    blockTimestamp: p.bigint(),
    transactionHash: p.string(),
  }),
}));
