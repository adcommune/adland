import { createSchema } from "@ponder/core";

export default createSchema((p) => ({
  AdGroup: p.createTable({
    id: p.string(),
    beneficiary: p.string(),
    adSpaces: p.many("AdSpace.adGroupId"),
    metadataId: p.string().references("AdGroupMetadata.id").optional(),
    metadata: p.one("metadataId"),
  }),
  AdGroupMetadata: p.createTable({
    id: p.string(),
    name: p.string().optional(),
    description: p.string().optional(),
    image: p.string().optional(),
    banner: p.string().optional(),
  }),
  AdSpace: p.createTable({
    id: p.string(),
    adGroupId: p.string().references("AdGroup.id"),
    adGroup: p.one("adGroupId"),
    metadatas: p.many("AdSpaceMetadata.adSpaceId"),
  }),
  AdSpaceMetadata: p.createTable({
    id: p.string(),
    adSpaceId: p.string().references("AdSpace.id"),
    adSpace: p.one("adSpaceId"),
    name: p.string(),
    description: p.string(),
    image: p.string(),
    imageGatewayUri: p.string(),
    externalUrl: p.string().optional(),
    aspectRatio: p.string(),
    frameRedirectUrl: p.string().optional(),
    blockNumber: p.bigint(),
    transactionHash: p.string(),
  }),
  TokenX: p.createTable({
    id: p.string(),
    underlyingToken: p.string(),
    superToken: p.string(),
    isNativeToken: p.boolean(),
    blockNumber: p.bigint(),
    blockTimestamp: p.bigint(),
    transactionHash: p.string(),
  }),
  Listing: p.createTable({
    id: p.string(),
    listingId: p.bigint(),
    tokenId: p.bigint(),
    quantity: p.bigint(),
    pricePerToken: p.bigint(),
    startTimestamp: p.bigint(),
    endTimestamp: p.bigint(),
    listingCreator: p.string(),
    listingOwner: p.string(),
    assetContract: p.string(),
    currency: p.string(),
    taxRate: p.bigint(),
    taxBeneficiary: p.string(),
    tokenType: p.int(),
    status: p.int(),
    reserved: p.boolean(),
  }),
}));
